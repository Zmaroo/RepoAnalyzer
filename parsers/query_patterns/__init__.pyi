from typing import Dict, Any, List, Optional, Callable, Union, TypeVar, Set
from parsers.types import (
    FileType, PatternCategory, PatternPurpose, 
    QueryPattern, PatternDefinition, PatternInfo
)

def _normalize_language_name(language: str) -> str: ...

def get_pattern_module(language_id: str) -> Optional[Any]: ...

def _ensure_pattern_category_keys(
    patterns_dict: Dict[str, Any]
) -> Dict[PatternCategory, Dict[PatternPurpose, Dict[str, QueryPattern]]]: ...

def get_patterns_for_language(
    language: str
) -> Dict[PatternCategory, Dict[PatternPurpose, Dict[str, QueryPattern]]]: ...

def get_typed_patterns_for_language(
    language: str
) -> Dict[PatternCategory, Dict[PatternPurpose, Dict[str, QueryPattern]]]: ...

def register_common_patterns(
) -> Dict[PatternCategory, Dict[PatternPurpose, Dict[str, QueryPattern]]]: ...

def list_available_languages() -> Set[str]: ...

async def initialize_pattern_system() -> None: ...

def get_all_available_patterns(
) -> Dict[str, Dict[PatternCategory, Dict[PatternPurpose, Dict[str, QueryPattern]]]]: ...

def clear_pattern_cache() -> None: ...

def validate_loaded_patterns() -> str: ...

async def initialize_patterns() -> None: ...

async def cleanup_patterns() -> None: ...

async def get_patterns_for_language(
    language_id: str
) -> Optional[Dict[PatternCategory, Dict[PatternPurpose, Dict[str, QueryPattern]]]]: ... 