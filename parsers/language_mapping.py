"""Language mapping definitions."""
from utils.logger import log
from typing import Optional, Set, Dict
import os
from parsers.models import ParserType, LanguageFeatures

LANGUAGE_ALIASES = {
    "c++": "cpp",
    "cplusplus": "cpp",
    "h": "c",
    "hpp": "cpp",
    "cc": "cpp",
    "cxx": "cpp",
    "c#": "csharp",
    "cs": "csharp",
    "js": "javascript",
    "jsx": "javascript",
    "ts": "typescript",
    "tsx": "typescript",
    "py": "python",
    "pyi": "python",
    "pyc": "python",
    "rb": "ruby",
    "rake": "ruby",
    "gemspec": "ruby",
    "sh": "bash",
    "bash": "bash",
    "zsh": "bash",
    "htm": "html",
    "xhtml": "html",
    "yml": "yaml",
    "kt": "kotlin",
    "kts": "kotlin",
    "scala": "scala",
    "gradle": "groovy",
    "markdown": "md",
    "rst": "restructuredtext",
    "rest": "restructuredtext",
    "asciidoc": "adoc",
    "ini": "properties",
    "conf": "properties",
    "cfg": "properties",
    "dockerfil": "dockerfile",
    "dockerfile": "dockerfile",
    "docker": "dockerfile",
    "mk": "make",
    "cmake": "cmake",
    "mak": "make",
    "el": "elisp",
    "emacs": "elisp",
    "emacslisp": "elisp",
    "ex": "elixir",
    "exs": "elixir",
    "heex": "elixir",
    "leex": "elixir",
    "lisp": "commonlisp",
    "cl": "commonlisp",
    "lsp": "commonlisp",
    "cu": "cuda",
    "cuh": "cuda",
    "dart": "dart",
    "freezed.dart": "dart",
    "g.dart": "dart",
    "rs": "rust",
    "rlib": "rust",
    "sc": "scala",
    "sbt": "scala",
    "sql": "sql",
    "mysql": "sql",
    "psql": "sql",
    "swift": "swift",
    "swiftinterface": "swift",
    "typescript": "typescript",
    "javascript": "javascript",
    "java": "java",
    "jav": "java",
    "v": "verilog",
    "vh": "verilog",
    "sv": "systemverilog",
    "svh": "systemverilog",
    "vhd": "vhdl",
    "vhdl": "vhdl",
    "vho": "vhdl",
    "vue": "vue",
    "zig": "zig",
    "scss": "css",
    "sass": "css",
    "less": "css",
    "pcss": "css",
    "postcss": "css",
    "css": "css",
    "elm": "elm",
    "erl": "erlang",
    "hrl": "erlang",
    "fish": "fish",
    "f90": "fortran",
    "f95": "fortran",
    "f03": "fortran",
    "f08": "fortran",
    "gd": "gdscript",
    "gleam": "gleam",
    "go": "go",
    "groovy": "groovy",
    "hack": "hack",
    "hh": "hack",
    "php": "hack",
    "hx": "haxe",
    "hxml": "haxe",
    "tf": "hcl",
    "hcl": "hcl",
    "tex": "latex",
    "sty": "latex",
    "cls": "latex",
    "lua": "lua",
    "mk": "make",
    "mak": "make",
    "makefile": "make",
    "m": "matlab",
    "mat": "matlab",
    "nix": "nix",
    "mm": "objc",
    "pas": "pascal",
    "pp": "pascal",
    "pl": "perl",
    "pm": "perl",
    "t": "perl",
    "php4": "php",
    "php5": "php",
    "php7": "php",
    "phps": "php",
    "ps1": "powershell",
    "psm1": "powershell",
    "psd1": "powershell",
    "prisma": "prisma",
    "proto": "proto",
    "purs": "purescript",
    "qml": "qmljs",
    "qmldir": "qmldir",
    "r": "r",
    "rkt": "racket",
    "txt": "requirements",
    "nut": "squirrel",
    "star": "starlark",
    "bzl": "starlark",
    "svelte": "svelte",
    "tcl": "tcl",
    "tk": "tcl",
    "sol": "solidity",
    "ml": "ocaml",
    "mli": "ocaml_interface",
}

EXTENSION_TO_LANGUAGE = {
    'py': 'python',
    'js': 'javascript',
    'ts': 'typescript',
    'cpp': 'cpp',
    'hpp': 'cpp',
    'c': 'c',
    'h': 'c',
    'rb': 'ruby',
    'php': 'php',
    'pl': 'perl',
    'sh': 'bash',
    'java': 'java',
    'kt': 'kotlin',
    'scala': 'scala',
    'groovy': 'groovy',
    'md': 'markdown',
    'rst': 'restructuredtext',
    'adoc': 'asciidoc',
    'tex': 'latex',
    'json': 'json',
    'yaml': 'yaml',
    'yml': 'yaml',
    'toml': 'toml',
    'ini': 'ini',
    'conf': 'ini',
    'dockerfile': 'dockerfile',
    'makefile': 'make',
    'cmake': 'cmake',
    'swift': 'swift',
    'lua': 'lua',
    'r': 'r',
    'el': 'elisp',
    'ex': 'elixir',
    'heex': 'elixir',
    'leex': 'elixir',
    'lisp': 'commonlisp',
    'cl': 'commonlisp',
    'lsp': 'commonlisp',
    'cs': 'csharp',
    'cu': 'cuda',
    'cuh': 'cuda',
    'dart': 'dart',
    'dockerfil': 'dockerfile',
    'rake': 'ruby',
    'gemspec': 'ruby',
    'rs': 'rust',
    'rlib': 'rust',
    'sc': 'scala',
    'sbt': 'scala',
    'sql': 'sql',
    'mysql': 'sql',
    'psql': 'sql',
    'swiftinterface': 'swift',
    'd.ts': 'typescript',
    'mjs': 'javascript',
    'cjs': 'javascript',
    'v': 'verilog',
    'vh': 'verilog',
    'sv': 'systemverilog',
    'svh': 'systemverilog',
    'vhd': 'vhdl',
    'vhdl': 'vhdl',
    'vho': 'vhdl',
    'vue': 'vue',
    'zig': 'zig',
    'elm': 'elm',
    'erl': 'erlang',
    'hrl': 'erlang',
    'fish': 'fish',
    'f90': 'fortran',
    'f95': 'fortran',
    'f03': 'fortran',
    'f08': 'fortran',
    'gd': 'gdscript',
    'gleam': 'gleam',
    'go': 'go',
    'hack': 'hack',
    'hh': 'hack',
    'hx': 'haxe',
    'hxml': 'haxe',
    'tf': 'hcl',
    'hcl': 'hcl',
    'tex': 'latex',
    'sty': 'latex',
    'cls': 'latex',
    'mk': 'make',
    'mak': 'make',
    'make': 'make',
    'm': 'matlab',
    'mat': 'matlab',
    'nix': 'nix',
    'mm': 'objc',
    'pas': 'pascal',
    'pp': 'pascal',
    'pl': 'perl',
    'pm': 'perl',
    't': 'perl',
    'php4': 'php',
    'php5': 'php',
    'php7': 'php',
    'phps': 'php',
    'ps1': 'powershell',
    'psm1': 'powershell',
    'psd1': 'powershell',
    'prisma': 'prisma',
    'proto': 'proto',
    'purs': 'purescript',
    'qml': 'qmljs',
    'qmldir': 'qmldir',
    'rkt': 'racket',
    'txt': 'requirements',
    'nut': 'squirrel',
    'star': 'starlark',
    'bzl': 'starlark',
    'svelte': 'svelte',
    'tcl': 'tcl',
    'tk': 'tcl',
    'sol': 'solidity',
    'ml': 'ocaml',
    'mli': 'ocaml_interface',
}

TREE_SITTER_LANGUAGES = {
    'bash', 'c', 'cpp', 'css', 'dockerfile', 'go', 'html', 'java', 'javascript',
    'json', 'kotlin', 'lua', 'make', 'markdown', 'php', 'python', 'ruby', 'rust',
    'scala', 'swift', 'toml', 'tsx', 'typescript', 'yaml', 'zig',
    'cmake', 'cuda', 'dart', 'elisp', 'elixir', 'elm', 'erlang', 'fish',
    'fortran', 'gdscript', 'gleam', 'groovy', 'hack', 'haxe', 'hcl',
    'latex', 'matlab', 'nix', 'objc', 'pascal', 'perl', 'powershell',
    'prisma', 'proto', 'purescript', 'qmljs', 'racket', 'sql', 'svelte',
    'tcl', 'verilog', 'vhdl', 'vue'
}

CUSTOM_PARSER_LANGUAGES = {
    'env',
    'plaintext',
    'yaml',
    'markdown',
    'editorconfig',
    'graphql',
    'nim',
    'ocaml',
    'ocaml_interface',
    'cobalt',
    'xml',
    'html',
    'ini',
    'json',
    'restructuredtext',
    'toml',
    'asciidoc'
}

# MIME type mappings
MIME_TYPES = {
    "python": {"text/x-python", "application/x-python-code"},
    "javascript": {"text/javascript", "application/javascript"},
    "typescript": {"text/typescript", "application/typescript"},
    "json": {"application/json"},
    "yaml": {"text/yaml", "application/x-yaml"},
    "markdown": {"text/markdown"},
    "html": {"text/html"},
    "css": {"text/css"},
}

def normalize_language_name(language: str) -> str:
    """Normalize a language name using LANGUAGE_ALIASES."""
    if not language:
        return "unknown"
    try:
        normalized = language.lower().replace('-', '_')
        return LANGUAGE_ALIASES.get(normalized, normalized)
    except Exception as e:
        log(f"Error normalizing language name '{language}': {e}", level="error")
        return "unknown"
    
def is_supported_language(language_id: str) -> bool:
    """Check if language is supported."""
    normalized = normalize_language_name(language_id)
    return normalized in TREE_SITTER_LANGUAGES or normalized in CUSTOM_PARSER_LANGUAGES
